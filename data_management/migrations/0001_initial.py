# Generated by Django 5.1.3 on 2024-11-30 03:21

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SMU_capture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('csv_current', models.FileField(blank=True, upload_to='')),
                ('csv_voltage', models.FileField(blank=True, upload_to='')),
                ('plot', models.ImageField(blank=True, upload_to='')),
            ],
        ),
        migrations.CreateModel(
            name='ChipList',
            fields=[
                ('chip_number', models.IntegerField(primary_key=True, serialize=False)),
                ('creation_time', models.DateTimeField(blank=True)),
                ('notes', models.CharField(blank=True, max_length=400, null=True)),
                ('IVCurrents_CSV', models.FileField(blank=True, upload_to='')),
                ('IVVoltages_CSV', models.FileField(blank=True, upload_to='')),
                ('content_type', models.CharField(blank=True, max_length=50)),
                ('chip_owner', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AluminumEvaporation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('AluminumEvaporation_step_time', models.DateTimeField()),
                ('AluminumEvaporation_temp', models.CharField(blank=True, max_length=400, null=True, verbose_name='Evaporation temp (°C)')),
                ('AluminumEvaporation_time', models.PositiveIntegerField(null=True, verbose_name='Evaporation time (sec) *')),
                ('AluminumEvaporation_pressure_before_start_seq', models.DecimalField(decimal_places=3, default='1.5', max_digits=10, verbose_name='Pressure before start (torr E-6) *')),
                ('AluminumEvaporation_pressure_before_evaporation', models.DecimalField(decimal_places=3, default='6.4', max_digits=10, verbose_name='Pressure before evaporation (torr E-6) *')),
                ('AluminumEvaporation_metric_layer_thickness', models.PositiveIntegerField(null=True, verbose_name='Layer thickness by profilometer (Å) *')),
                ('AluminumEvaporation_metric_layer_thick_qcm', models.PositiveIntegerField(null=True, verbose_name='Layer thickness by QCM (Å) *')),
                ('AluminumEvaporation_metric_deposition_rate', models.PositiveIntegerField(null=True, verbose_name='Deposition rate (Å/sec) *')),
                ('picture', models.FileField(blank=True, upload_to='')),
                ('content_type', models.CharField(blank=True, max_length=50)),
                ('AluminumEvaporation_notes', models.CharField(blank=True, max_length=400, null=True, verbose_name='Notes')),
                ('chip_owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('chip_number', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='data_management.chiplist', verbose_name='Chip number *')),
            ],
        ),
        migrations.CreateModel(
            name='AluminumEtch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('AluminumEtch_step_time', models.DateTimeField()),
                ('AluminumEtch_temp', models.IntegerField(default='40', verbose_name='Etch temp (°C) *')),
                ('AluminumEtch_time', models.PositiveIntegerField(null=True, verbose_name='Etch time (sec) *')),
                ('AluminumEtch_stir_rpm', models.PositiveIntegerField(default='350', verbose_name='Stir speed (rpm) *')),
                ('AluminumEtch_metric_alum_etch_depth', models.PositiveIntegerField(null=True, verbose_name='Etch depth (nm) *')),
                ('AluminumEtch_metric_photoresist_peeling', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No')], max_length=400, null=True, verbose_name='PR peeling?')),
                ('AluminumEtch_metric_aluminum_peeling', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No')], max_length=400, null=True, verbose_name='Aluminum peeling?')),
                ('picture', models.FileField(blank=True, upload_to='')),
                ('content_type', models.CharField(blank=True, max_length=50)),
                ('AluminumEtch_notes', models.CharField(blank=True, max_length=400, null=True, verbose_name='Notes')),
                ('chip_owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('chip_number', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='data_management.chiplist', verbose_name='Chip number *')),
            ],
        ),
        migrations.CreateModel(
            name='ChipListSearch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chip_number', models.IntegerField(blank=True)),
                ('creation_time', models.DateTimeField(blank=True)),
                ('notes', models.CharField(blank=True, max_length=400, null=True)),
                ('chip_owner', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Diffusion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Diffusion_step_time', models.DateTimeField(blank=True)),
                ('Diffusion_temp', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True, verbose_name='Diffusion temp (°C) *')),
                ('Diffusion_duration', models.PositiveIntegerField(blank=True, null=True, verbose_name='Diffusion duration (sec) *')),
                ('picture', models.FileField(blank=True, upload_to='')),
                ('content_type', models.CharField(blank=True, max_length=50)),
                ('Diffusion_notes', models.CharField(blank=True, max_length=400, null=True, verbose_name='Notes')),
                ('chip_number', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to='data_management.chiplist', verbose_name='Chip number *')),
                ('chip_owner', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GlassDeposition_700B',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('GlassDeposition_700B_step_time', models.DateTimeField()),
                ('GlassDeposition_700B_cleaning_step', models.CharField(default='Acetone + IPA', max_length=400, verbose_name='Cleaning step *')),
                ('GlassDeposition_700B_days_glass_at_room_temp', models.CharField(blank=True, max_length=400, null=True, verbose_name='Days at room temp')),
                ('GlassDeposition_700B_prebake_temp', models.IntegerField(default='100', verbose_name='Prebake temp (°C) *')),
                ('GlassDeposition_700B_prebake_time', models.PositiveIntegerField(default='20', verbose_name='Prebake time (sec) *')),
                ('GlassDeposition_700B_amount_drops', models.PositiveIntegerField(default='1', verbose_name='Number of drops *')),
                ('GlassDeposition_700B_spin_rpm', models.PositiveIntegerField(default='4000', verbose_name='Spin speed (rpm) *')),
                ('GlassDeposition_700B_spin_time', models.PositiveIntegerField(default='20', verbose_name='Spin time (sec) *')),
                ('GlassDeposition_700B_bake_temp', models.IntegerField(default='350', verbose_name='Bake temp (°C) *')),
                ('GlassDeposition_700B_bake_time', models.PositiveIntegerField(default='1800', verbose_name='Bake time (sec) *')),
                ('GlassDeposition_700B_humidity', models.CharField(blank=True, max_length=400, null=True, verbose_name='Humidity')),
                ('GlassDeposition_700B_metric_layer_thickness', models.CharField(blank=True, max_length=400, null=True, verbose_name='Layer thickness (um)')),
                ('GlassDeposition_700B_metric_cracking', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No')], max_length=400, null=True, verbose_name='Cracking?')),
                ('GlassDeposition_700B_metric_particles', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No')], max_length=400, null=True, verbose_name='Particles?')),
                ('picture', models.FileField(blank=True, upload_to='')),
                ('content_type', models.CharField(blank=True, max_length=50)),
                ('GlassDeposition_700B_notes', models.CharField(blank=True, max_length=400, null=True, verbose_name='Notes')),
                ('chip_number', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='data_management.chiplist', verbose_name='Chip number *')),
                ('chip_owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GlassDeposition_P504',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('GlassDeposition_P504_step_time', models.DateTimeField()),
                ('GlassDeposition_P504_cleaning_step', models.CharField(default='Acetone + IPA', max_length=400, verbose_name='Cleaning step *')),
                ('GlassDeposition_P504_days_glass_at_room_temp', models.CharField(blank=True, max_length=400, null=True, verbose_name='Days at room temp')),
                ('GlassDeposition_P504_prebake_temp', models.IntegerField(default='100', verbose_name='Prebake temp (°C) *')),
                ('GlassDeposition_P504_prebake_time', models.PositiveIntegerField(default='20', verbose_name='Prebake time (sec) *')),
                ('GlassDeposition_P504_amount_drops', models.PositiveIntegerField(default='3', verbose_name='Number of drops *')),
                ('GlassDeposition_P504_spin_rpm', models.PositiveIntegerField(default='4000', verbose_name='Spin speed (rpm) *')),
                ('GlassDeposition_P504_spin_time', models.PositiveIntegerField(default='20', verbose_name='Spin time (sec) *')),
                ('GlassDeposition_P504_bake_temp', models.IntegerField(null=True, verbose_name='Bake temp (°C) *')),
                ('GlassDeposition_P504_bake_time', models.PositiveIntegerField(null=True, verbose_name='Bake time (sec) *')),
                ('GlassDeposition_P504_diffusion_temp', models.CharField(blank=True, max_length=400, null=True, verbose_name='Diffusion temp (°C)')),
                ('GlassDeposition_P504_diffusion_time', models.CharField(blank=True, max_length=400, null=True, verbose_name='Diffusion time (sec)')),
                ('GlassDeposition_P504_humidity', models.CharField(blank=True, max_length=400, null=True, verbose_name='Humidity')),
                ('GlassDeposition_P504_metric_layer_thickness', models.CharField(blank=True, max_length=400, null=True, verbose_name='Layer thickness (um)')),
                ('GlassDeposition_P504_metric_cracking', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No')], max_length=400, null=True, verbose_name='Cracking?')),
                ('GlassDeposition_P504_metric_particles', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No')], max_length=400, null=True, verbose_name='Particles?')),
                ('picture', models.FileField(blank=True, upload_to='')),
                ('content_type', models.CharField(blank=True, max_length=50)),
                ('GlassDeposition_P504_notes', models.CharField(blank=True, max_length=400, null=True, verbose_name='Notes')),
                ('chip_number', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='data_management.chiplist', verbose_name='Chip number *')),
                ('chip_owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='HFOxideEtch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('HFOxideEtch_step_time', models.DateTimeField()),
                ('HFOxideEtch_temp', models.IntegerField(null=True, verbose_name='Etch temp (°C) *')),
                ('HFOxideEtch_time', models.PositiveIntegerField(null=True, verbose_name='Etch time (sec) *')),
                ('HFOxideEtch_metric_oxide_etch_depth', models.PositiveIntegerField(null=True, verbose_name='Etch depth (nm) *')),
                ('picture', models.FileField(blank=True, upload_to='')),
                ('content_type', models.CharField(blank=True, max_length=50)),
                ('HFOxideEtch_notes', models.CharField(blank=True, max_length=400, null=True, verbose_name='Notes')),
                ('chip_number', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='data_management.chiplist', verbose_name='Chip number *')),
                ('chip_owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Patterning',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Patterning_step_time', models.DateTimeField()),
                ('Patterning_underlying_material', models.CharField(choices=[('PolySilicon', 'PolySi'), ('P504', 'Spin-on Glass (P504)'), ('700B', 'Spin-on Glass (700B)'), ('Aluminum', 'Aluminum')], default='PolySilicon', max_length=400, verbose_name='Underlying material *')),
                ('Patterning_cleaning_step', models.CharField(default='Acetone + IPA', max_length=400, verbose_name='Cleaning step *')),
                ('Patterning_hdms_prebake_temp', models.IntegerField(default='100', verbose_name='HMDS prebake temp (°C) *')),
                ('Patterning_hdms_prebake_time', models.PositiveIntegerField(default='60', verbose_name='HMDS prebake time (sec) *')),
                ('Patterning_hdms_spin_rpm', models.PositiveIntegerField(default='3000', verbose_name='HMDS spin speed (rpm) *')),
                ('Patterning_hdms_spin_time', models.PositiveIntegerField(default='20', verbose_name='HMDS spin time (sec) *')),
                ('Patterning_hdms_bake_temp', models.IntegerField(default='100', verbose_name='HMDS bake temp (°C) *')),
                ('Patterning_hdms_bake_time', models.PositiveIntegerField(default='20', verbose_name='HMDS bake time (sec) *')),
                ('Patterning_photoresist_spin_rpm', models.PositiveIntegerField(default='4000', verbose_name='PR spin speed (rpm) *')),
                ('Patterning_photoresist_spin_time', models.PositiveIntegerField(default='30', verbose_name='PR spin time (sec) *')),
                ('Patterning_photoresist_bake_temp', models.IntegerField(default='100', verbose_name='PR bake temp (°C) *')),
                ('Patterning_photoresist_bake_time', models.PositiveIntegerField(default='90', verbose_name='PR bake time (sec) *')),
                ('Patterning_exposure_pattern', models.FileField(null=True, upload_to='', verbose_name='Exposure pattern *')),
                ('Patterning_exposure_time', models.PositiveIntegerField(default='8000', verbose_name='Exposure time (sec) *')),
                ('Patterning_develop_time', models.PositiveIntegerField(default='60', verbose_name='Develop time (sec) *')),
                ('Patterning_metric_pattern_quality', models.CharField(choices=[('1', '1 (Worst)'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5 (Best)')], max_length=400, null=True, verbose_name='Pattern quality *')),
                ('Patterning_metric_development', models.CharField(choices=[('Well-developed', 'Well-developed'), ('Underdeveloped', 'Underdeveloped'), ('Overdeveloped', 'Overdeveloped')], max_length=400, null=True, verbose_name='Development quality *')),
                ('Patterning_metric_contaminants', models.CharField(choices=[('1', '1 (Little to none)'), ('2', '2'), ('3', '3 (Significant amounts)')], max_length=400, null=True, verbose_name='Level of contamination *')),
                ('picture', models.FileField(blank=True, upload_to='')),
                ('content_type', models.CharField(blank=True, max_length=50)),
                ('Patterning_notes', models.CharField(blank=True, max_length=400, null=True, verbose_name='Notes')),
                ('chip_number', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='data_management.chiplist', verbose_name='Chip number *')),
                ('chip_owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PlasmaClean',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PlasmaClean_step_time', models.DateTimeField()),
                ('PlasmaClean_o2_flow', models.PositiveIntegerField(default='10', verbose_name='O2 flow (sccm) *')),
                ('PlasmaClean_rf_power', models.PositiveIntegerField(default='100', verbose_name='RF power (Watts) *')),
                ('PlasmaClean_clean_time', models.PositiveIntegerField(null=True, verbose_name='Clean time (sec) *')),
                ('PlasmaClean_metric_contaminants', models.CharField(blank=True, max_length=400, null=True, verbose_name='Contaminants')),
                ('picture', models.FileField(blank=True, upload_to='')),
                ('content_type', models.CharField(blank=True, max_length=50)),
                ('PlasmaClean_notes', models.CharField(blank=True, max_length=400, null=True, verbose_name='Notes')),
                ('chip_number', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='data_management.chiplist', verbose_name='Chip number *')),
                ('chip_owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PlasmaEtch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PlasmaEtch_step_time', models.DateTimeField()),
                ('PlasmaEtch_o2_flow', models.CharField(blank=True, max_length=400, null=True, verbose_name='O2 flow (sccm)')),
                ('PlasmaEtch_sf6_flow', models.CharField(blank=True, default='10', max_length=400, null=True, verbose_name='SF6 flow (sccm)')),
                ('PlasmaEtch_rf_power', models.PositiveIntegerField(default='100', verbose_name='RF power (Watts) *')),
                ('PlasmaEtch_etch_time', models.PositiveIntegerField(default='100', verbose_name='Etch time (sec) *')),
                ('PlasmaEtch_etch_depth', models.PositiveIntegerField(default='500', verbose_name='Etch depth (nm) *')),
                ('picture', models.FileField(blank=True, upload_to='')),
                ('content_type', models.CharField(blank=True, max_length=50)),
                ('PlasmaEtch_notes', models.CharField(blank=True, max_length=400, null=True, verbose_name='Notes')),
                ('chip_number', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='data_management.chiplist', verbose_name='Chip number *')),
                ('chip_owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(blank=True, max_length=300)),
                ('picture', models.FileField(blank=True, upload_to='')),
                ('content_type', models.CharField(max_length=50)),
                ('followers', models.ManyToManyField(related_name='followers', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='entry_creators', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='IVCurve',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('drain_resistance', models.IntegerField(default=100)),
                ('gate_resistance', models.IntegerField(default=100)),
                ('device_id', models.CharField(max_length=50)),
                ('gate_voltages', models.CharField(max_length=500)),
                ('chip_number', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to='data_management.chiplist')),
                ('chip_owner', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('captures', models.ManyToManyField(to='data_management.smu_capture')),
            ],
        ),
    ]
